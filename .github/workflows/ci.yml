name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24.3'
  NODE_VERSION: '20'

jobs:
  test-go:
    name: Go Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download Go dependencies
      run: make deps

    - name: Run Go tests
      run: make test-go

    - name: Run Go tests with race detection
      run: make test-race

    - name: Run Go tests with coverage
      run: make test-coverage-go

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: go-coverage-report
        path: coverage.html

  test-web:
    name: Web Frontend Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install JavaScript dependencies
      run: make deps-js

    - name: Run JavaScript tests
      run: make test-js

    - name: Run JavaScript tests with coverage
      run: make test-coverage-js

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: web-test-results
        path: |
          coverage/
          test-results/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-go]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: make deps

    - name: Build application
      run: make build

    - name: Test CLI mode
      run: |
        timeout 10s ./trafficsim || [ $? -eq 124 ]

    - name: Test web server mode
      run: |
        ./trafficsim -web -port 8081 &
        SERVER_PID=$!
        sleep 5

        # Test endpoints
        curl -f http://localhost:8081/api/platforms
        curl -f http://localhost:8081/api/metrics
        curl -f http://localhost:8081/

        kill $SERVER_PID

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: make deps-all

    - name: Format code
      run: make fmt

    - name: Vet code
      run: make vet

    - name: Run linters
      run: make lint-all

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: make deps

    - name: Run security scan
      run: make security

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test-go, test-web, lint]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: make deps

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p build
        go build -ldflags="-s -w" -o build/trafficsim-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} ./cmd/simrunner

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: trafficsim-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: make deps

    - name: Run benchmarks
      run: make benchmark | tee benchmark.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test-go, test-web, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: make docker-build

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, docker, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate changelog
      id: changelog
      run: |
        echo "## Changes" > CHANGELOG.md
        git log --oneline --no-merges $(git describe --tags --abbrev=0)..HEAD >> CHANGELOG.md || echo "Initial release" >> CHANGELOG.md

    - name: Create Release
      if: contains(github.event.head_commit.message, '[release]')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body_path: CHANGELOG.md
        files: |
          trafficsim-*/trafficsim-*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
